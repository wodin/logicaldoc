<project name="logicaldoc" default="update" basedir=".">
   <path id="class.path">
      <pathelement path="${classpath}" />
      <fileset dir="lib">
         <include name="**/*.jar" />
      </fileset>
      <pathelement location="lib" />
   </path>
   <taskdef resource="net/sf/antcontrib/antlib.xml" />
   <property environment="env" />
   <property name="root" location=".." />
   <property file="${root}/conf/build.properties" />
   <property file="${root}/conf/context.properties" />
   <property name="webapp" location="${root}/tomcat/webapps/ROOT" />
   <path id="webapp.classpath">
      <pathelement path="${classpath}" />
      <fileset dir="${webapp}/WEB-INF/lib">
         <include name="**/*.jar" />
      </fileset>
      <pathelement location="${webapp}/WEB-INF/classes" />
   </path>
   <!-- start/stop a service on windows -->
   <macrodef name="service">
      <attribute name="service" />
      <attribute name="action" />
      <sequential>
         <exec executable="cmd.exe">
            <arg line="/c net @{action} '@{service}'" />
         </exec>
      </sequential>
   </macrodef>
   <target name="init">
      <condition property="isWindows">
         <os family="windows" />
      </condition>
      <condition property="isLinux">
         <os family="unix" />
      </condition>
   </target>
   <target name="tomcat-start" depends="init">
      <if>
         <equals arg1="${isWindows}" arg2="true" />
         <then>
            <service action="start" service="${tomcat.service}" />
         </then>
         <else>
            <exec executable="./logicaldoc.sh">
               <arg line="start" />
            </exec>
         </else>
      </if>
      <echo>${tomcat.service} started</echo>
   </target>
   <target name="tomcat-stop" depends="init">
      <if>
         <equals arg1="${isWindows}" arg2="true" />
         <then>
            <service action="stop" service="${tomcat.service}" />
         </then>
         <else>
            <exec executable="./logicaldoc.sh">
               <arg line="stop" />
            </exec>
         </else>
      </if>
      <echo>${tomcat.service} stopped</echo>
   </target>
   <target name="update">
      <echo>Update started</echo>
      <antcall target="tomcat-stop" />
      <!-- Sort by filename asc -->
      <sort>
         <fileset id="fileset.update" dir="${update.dir}" includes="${update.prefix}-*.zip" />
      </sort>
      <delete dir="${update.workdir}" failonerror="false" />
      <mkdir dir="${update.workdir}" />
      <for param="file">
         <path>
            <fileset refid="fileset.update" />
         </path>
         <sequential>
            <echo>Process update package @{file}</echo>
            <trycatch property="error" reference="exception">
               <try>
                  <unzip dest="${update.workdir}" overwrite="true" src="@{file}" />
                  <var name="update.applyto" unset="true" />
                  <var name="product.release" unset="true" />
                  <loadproperties srcFile="${update.workdir}/build.properties" />
                  <loadproperties srcFile="../conf/context.properties" />
                  <condition property="build-is-present">
                     <available file="${update.workdir}/build.xml" type="file" />
                  </condition>
                  <if>
                     <equals arg1="${build-is-present}" arg2="true" />
                     <then>
                        <property file="${update.workdir}/build.properties" />
                        <!--Check if the update applies to this release -->
                        <for list="${update.applyto}" param="release">
                           <sequential>
                              <trycatch property="error" reference="exception">
                                 <try>
                                    <if>
                                       <equals arg1="@{release}" arg2="${product.release}" />
                                       <then>
                                          <property name="match.found" value="true" />
                                          <throw />
                                       </then>
                                       <else>
                                       </else>
                                    </if>
                                 </try>
                                 <catch>
                                 </catch>
                              </trycatch>
                           </sequential>
                        </for>
                        <if>
                           <equals arg1="${match.found}" arg2="true" />
                           <then>
                              <echo>Execute update package @{file}</echo>
                              <ant antfile="build.xml" dir="${update.workdir}" />
                              <move file="@{file}" tofile="@{file}.processed" />
                           </then>
                           <else>
                              <echo>Update package @{file} does not apply to current release ${product.release}</echo>
                              <move file="@{file}" tofile="@{file}.skipped" />
                           </else>
                        </if>
                     </then>
                     <else>
                        <echo>@{file} is not an update package</echo>
                     </else>
                  </if>
               </try>
               <catch>
                  <echo>Error processing @{file}</echo>
                  <echo>${error}</echo>
                  <throw refid="exception" />
               </catch>
            </trycatch>
         </sequential>
      </for>
      <delete dir="${update.workdir}" failonerror="false" />
      <antcall target="tomcat-start" />
      <echo>Update finished</echo>
   </target>
   <target name="patch">
      <echo>Patch started</echo>
      <antcall target="tomcat-stop" />
      <!-- Sort by filename asc -->
      <sort>
         <fileset id="fileset.patch" dir="${patch.dir}" includes="${patch.prefix}-*.zip" />
      </sort>
      <delete dir="${patch.workdir}" failonerror="false" />
      <mkdir dir="${patch.workdir}" />
      <for param="file">
         <path>
            <fileset refid="fileset.patch" />
         </path>
         <sequential>
            <echo>Process update package @{file}</echo>
            <trycatch property="error" reference="exception">
               <try>
                  <unzip dest="${patch.workdir}" overwrite="true" src="@{file}" />
                  <var name="update.applyto" unset="true" />
                  <var name="product.release" unset="true" />
                  <loadproperties srcFile="${patch.workdir}/build.properties" />
                  <loadproperties srcFile="../conf/context.properties" />
                  <condition property="build-is-present">
                     <available file="${patch.workdir}/build.xml" type="file" />
                  </condition>
                  <if>
                     <equals arg1="${build-is-present}" arg2="true" />
                     <then>
                        <property file="${patch.workdir}/build.properties" />
                        <!--Check if the update applies to this release -->
                        <for list="${update.applyto}" param="release">
                           <sequential>
                              <trycatch property="error" reference="exception">
                                 <try>
                                    <if>
                                       <equals arg1="@{release}" arg2="${product.release}" />
                                       <then>
                                          <property name="match.found" value="true" />
                                          <throw />
                                       </then>
                                       <else>
                                       </else>
                                    </if>
                                 </try>
                                 <catch>
                                 </catch>
                              </trycatch>
                           </sequential>
                        </for>
                        <if>
                           <equals arg1="${match.found}" arg2="true" />
                           <then>
                              <echo>Execute patch package @{file}</echo>
                              <ant antfile="build.xml" dir="${patch.workdir}" />
                              <move file="@{file}" tofile="@{file}.processed" />
                           </then>
                           <else>
                              <echo>Patch package @{file} does not apply to current release ${product.release}</echo>
                              <move file="@{file}" tofile="@{file}.skipped" />
                           </else>
                        </if>
                     </then>
                     <else>
                        <echo>@{file} is not an update package</echo>
                     </else>
                  </if>
               </try>
               <catch>
                  <echo>Error processing @{file}</echo>
                  <echo>${error}</echo>
                  <throw refid="exception" />
               </catch>
            </trycatch>
         </sequential>
      </for>
      <delete dir="${patch.workdir}" failonerror="false" />
      <antcall target="tomcat-start" />
      <echo>Patch finished</echo>
   </target>
</project>